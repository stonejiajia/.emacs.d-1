;;; lang/rust/config.el -*- lexical-binding: t; -*-


;(load! +stonerust)


(defvar +rust-ext-dir (concat doom-etc-dir "rust/")
  "TODO")

(def-package! rust-mode
  :mode "\\.rs$"
  :init
  (add-hook 'rust-mode-hook #'flycheck-mode)
  :config
  (setq racer-cmd "/Users/stone20091652/.cargo/bin/racer")
  (setq racer-rust-src-path "/Users/stone20091652/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/")
  (set! :build 'run-cargo '(rust-mode cargo-minor-mode) #'+rust/run-cargo
    :when #'+rust-cargo-project-p))


(def-package! racer
  :after rust-mode
  :preface
  :init
  (add-hook! 'rust-mode-hook #'(racer-mode flycheck-rust-setup))
  :config
  (setq racer-cmd "/Users/stone20091652/.cargo/bin/racer")
  (setq racer-rust-src-path "/Users/stone20091652/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/")


  (unless (file-exists-p racer-cmd)
    (warn "rust-mode: racer binary can't be found; auto-completion is disabled"))

  ;; TODO Unit test keybinds
  (map! :map rust-mode-map :m "gd" #'racer-find-definition))


(def-package! cargo
  :ensure t
  :diminish cargo-minor-mode
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode))

(use-package cargo
  :after rust-mode
  :bind (:map rust-mode-map
              ("C-c C-c" . cargo-process-run)))


(def-package! flycheck-rust
  :when (featurep! :feature syntax-checker)
  :after rust-mode)




(add-to-list 'load-path "<path to emacs-lsp>")
(with-eval-after-load 'lsp-mode
    (require 'lsp-flycheck))
(require 'lsp-mode)

(lsp-define-stdio-client
 ;; This can be a symbol of your choosing. It will be used as a the
 ;; prefix for a dynamically generated function "-enable"; in this
 ;; case: lsp-prog-major-mode-enable
 lsp-prog-major-mode
 "language-id"
 ;; This will be used to report a project's root directory to the LSP
 ;; server.
 (lambda () default-directory)
 ;; This is the command to start the LSP server. It may either be a
 ;; string containing the path of the command, or a list wherein the
 ;; car is a string containing the path of the command, and the cdr
 ;; are arguments to that command.
 '("/my/lsp/server" "and" "args"))

;; Here we'll add the function that was dynamically generated by the
;; call to lsp-define-stdio-client to the major-mode hook of the
;; language we want to run it under.
;;
;; This function will turn lsp-mode on and call the command given to
;; start the LSP server.
(add-hook 'prog-major-mode #'lsp-prog-major-mode-enable)

(with-eval-after-load 'lsp-mode
  (setq lsp-rust-rls-command '("rustup" "run" "nightly" "rls"))
  (require 'lsp-rust))



